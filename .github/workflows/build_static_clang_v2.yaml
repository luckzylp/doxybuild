name: Doxygen Build and Release with static clang

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Optional: Git ref to build (branch, tag, or SHA)"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  # Job to determine the latest Doxygen release tag
  get-latest-tag:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_tag.outputs.latest_tag }}
      release_ref: ${{ steps.get_ref.outputs.ref }}
      commit_sha: ${{ steps.get_sha.outputs.commit_sha }}
    steps:
      - name: Get latest release tag
        id: get_tag
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/doxygen/doxygen/releases/latest" | jq -r '.tag_name')
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Using latest tag: $LATEST_TAG"

      - name: Determine build ref
        id: get_ref
        run: |
          if [ -n "${{ github.event.inputs.ref }}" ]; then
            echo "Using custom ref: ${{ github.event.inputs.ref }}"
            echo "ref=${{ github.event.inputs.ref }}" >> $GITHUB_OUTPUT
          else
            echo "Using latest tag as ref: ${{ steps.get_tag.outputs.latest_tag }}"
            echo "ref=${{ steps.get_tag.outputs.latest_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Get commit SHA for ref
        id: get_sha
        uses: actions/github-script@v7
        with:
          script: |
            const ref = '${{ steps.get_ref.outputs.ref }}';
            try {
              const response = await github.rest.repos.getCommit({
                owner: 'doxygen',
                repo: 'doxygen',
                ref: ref
              });
              return response.data.sha;
            } catch (error) {
              console.error(`Error fetching commit for ref '${ref}': ${error}`);
              throw error;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    permissions:
      contents: write
    needs: get-latest-tag
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # gcc compiler on x86_64 ubuntu
          - name: "Ubuntu Latest GCC Release x86_64"
            os: ubuntu-22.04
            build_type: "Release"
            cc: "gcc"
            cxx: "g++"
            build_gen: "Ninja"
            cflags:
            cmake_extra_opts: >-
                "-Duse_libclang=YES"
                "-Dstatic_libclang=YES"
                "-Dbuild_search=YES"
                "-Dbuild_app=YES"
                "-Dbuild_parse=YES"
                "-Dbuild_doc=YES"
                "-Dbuild_wizard=YES"
                "-DCMAKE_FIND_LIBRARY_SUFFIXES=".a"
                "-DBUILD_SHARED_LIBS=OFF"
                "-DCMAKE_EXE_LINKER_FLAGS=-static-libgcc -static-libstdc++"
                "-DCMAKE_SHARED_LINKER_FLAGS=-static-libgcc -static-libstdc++"

          # clang compiler on x86_64 ubuntu
          - name: "Ubuntu Latest Clang Release x86_64"
            os: ubuntu-22.04
            build_type: "Release"
            cc: "clang"
            cxx: "clang++"
            build_gen: "Ninja"
            cflags:
            cmake_extra_opts: >-
              "-Duse_libclang=YES"
              "-Dstatic_libclang=YES"
              "-Duse_libc++=NO"
              "-Dbuild_search=YES"
              "-Dbuild_app=YES"
              "-Dbuild_parse=YES"
              "-Dbuild_doc=YES"
              "-Dbuild_wizard=YES"
              "-DCMAKE_FIND_LIBRARY_SUFFIXES=\".a\""
              "-DBUILD_SHARED_LIBS=OFF"
              "-DCMAKE_EXE_LINKER_FLAGS=-static-libgcc -static-libstdc++"
              "-DCMAKE_SHARED_LINKER_FLAGS=-static-libgcc -static-libstdc++"

    steps:
      - name: Checkout doxygen
        uses: actions/checkout@v4
        with:
          repository: doxygen/doxygen
          ref: ${{ needs.get-latest-tag.outputs.release_ref }}
          fetch-depth: 0

      - name: Install LaTeX (Linux)
        run: |
          sudo apt update --fix-missing
          sudo apt upgrade
          sudo apt update
          sudo apt-get install texlive texlive-latex-recommended texlive-extra-utils texlive-latex-extra texlive-font-utils
        if: startsWith(matrix.config.os,'ubuntu-')

      - name: Uninstall existing LLVM/Clang
        run: |
          # Remove all existing LLVM/Clang packages and binaries
          sudo apt remove --purge -y '^llvm-.*' '^clang-.*' '^libclang-.*' '^libllvm.*' || true
          sudo apt autoremove -y
          sudo apt clean
          # Clean up any remaining binaries
          sudo rm -f /usr/bin/clang* /usr/bin/llvm*
          # Verify removal
          which clang || echo "clang not found (expected after uninstall)"
        if: matrix.config.os == 'ubuntu-22.04'

      - name: Install LLVM-14 (for Clang builds)
        run: |
          # Install clang-14 specifically for Clang-based builds
          sudo apt update
          sudo apt install -y clang-14 libclang-14-dev
          # Configure clang-14 as system default
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100
          # Verify installation
          clang++ -v
        if: matrix.config.cc == 'clang' && matrix.config.os == 'ubuntu-22.04'
        
      - name: Download and extract static LLVM
        run: |
          COMPILER="${{ matrix.config.cc }}"
          # Fetch latest release gcc/clang static lib from clangbuild repository
          RELEASE_TAG=$(curl -s "https://api.github.com/repos/luckzylp/clangbuild/releases/latest" | jq -r '.tag_name')  
          OFFICIAL_URL=$(curl -s "https://api.github.com/repos/luckzylp/clangbuild/releases/tags/${RELEASE_TAG}" | grep -Eo "https://[^\"]*linux-${COMPILER}\.tar\.gz" | head -1)
          wget "${OFFICIAL_URL}" -O llvm-static.tar.gz
          mkdir -p "$HOME/llvm-install"
          tar -xzf llvm-static.tar.gz -C "$HOME/llvm-install" --strip-components=1
          echo "LLVM installed at: $HOME/llvm-install"
        shell: bash
        if: matrix.config.os == 'ubuntu-22.04'

      - name: Install libxapian (Ubuntu 22.04)
        run: |
          sudo apt update
          sudo apt install libxapian-dev
        if: matrix.config.os == 'ubuntu-22.04'

      - name: Install Ghostscript (Linux)
        run: |
          sudo apt update
          sudo apt-get install ghostscript
        if: startsWith(matrix.config.os,'ubuntu-')

      - name: Install xmllint (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils
        if: startsWith(matrix.config.os,'ubuntu-')

      - name: Install Graphviz (Linux)
        run: |
          sudo apt update
          sudo apt-get install graphviz
        if: startsWith(matrix.config.os,'ubuntu-')

      - name: Install Qt 5
        uses: jdpurcell/install-qt-action@v5
        with:
          version: 5.*
        if: startsWith(matrix.config.os,'macos-')!=true && matrix.config.os != 'ubuntu-24.04-arm'

      - name: Check tool versions (Linux)
        shell: bash
        run: |
          echo "=== perl ===";
          perl --version;
          echo "=== python ===";
          python --version;
          echo "=== cmake ===";
          cmake --version;
          echo "=== latex ===";
          latex --version;
          echo "=== bibtex ===";
          bibtex --version
          echo "=== dvips ===";
          dvips --version
          echo "=== bison ===";
          bison --version;
          echo "=== flex ===";
          flex --version;
          echo "=== dot ===";
          dot -V;
          echo "=== ghostscript ===";
          gs --version;
        if: matrix.config.os != 'windows-latest'

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})

          # Set path to downloaded LLVM
          set(LLVM_PATH "-DCMAKE_PREFIX_PATH=$ENV{HOME}/llvm-install")

          execute_process(
            COMMAND cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
              -G "${{ matrix.config.build_gen }}"
              ${{ matrix.config.cflags }}
              ${{ matrix.config.cmake_extra_opts }}
              ${LLVM_PATH}
              RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      # Build step
      - name: Build
        shell: cmake -P {0}
        run: |
          include(ProcessorCount)
          ProcessorCount(N)
          execute_process(
            COMMAND cmake --build build --parallel ${N}
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()

      # Test execution step
      - name: Run tests (Linux)
        shell: cmake -P {0}
        run: |
          set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

          execute_process(
            COMMAND
              cmake -E env TEST_FLAGS="--xml --xmlxsd --xhtml --qhp --docbook --rtf --man"
              cmake --build build --target tests
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Running tests failed!")
          endif()
        if: matrix.config.os != 'windows-latest'

      # Generate documentation
      - name: Generate documentation
        shell: cmake -P {0}
        run: |
          execute_process(
            COMMAND cmake --build build --target docs
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Building documentation failed")
          endif()

      # Internal documentation generation (only for primary config)
      - name: Generate Internal documentation
        shell: cmake -P {0}
        run: |
          execute_process(
            COMMAND cmake --build build --target docs_internal
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Building internal documentation failed")
          endif()
        if: matrix.config.name == 'Ubuntu Latest GCC Release x86_64'

      # Artifact preparation with new packaging structure
      - name: Prepare artifacts
        run: |
          # Format version number from release tag
          RELEASE_TAG="${{ needs.get-latest-tag.outputs.release_tag }}"
          VERSION=$(echo "${RELEASE_TAG}" | sed -e 's/Release_//' -e 's/_/./g')
          PLATFORM="${{ matrix.config.os }}"
          COMPILER="${{ matrix.config.cc }}"
          COMMIT_SHA="${{ needs.get-latest-tag.outputs.commit_sha }}"

          # Create package directory structure
          PACKAGE_DIR="doxygen-${VERSION}"
          mkdir -p "${PACKAGE_DIR}"

          # Download and extract official Linux binaries
          OFFICIAL_URL=$(curl -s "https://api.github.com/repos/doxygen/doxygen/releases/tags/${RELEASE_TAG}" | grep -Eo 'https://[^"]*linux\.bin\.tar\.gz' | head -1)
          wget "${OFFICIAL_URL}" -O doxygen-linux-bin.tar.gz
          mkdir -p official_bin
          tar -xzf doxygen-linux-bin.tar.gz -C official_bin --strip-components=1

          # Create bin directory and copy official binaries
          cp -r official_bin/* "${PACKAGE_DIR}/"
          rm -rf "${PACKAGE_DIR}/bin"
          mkdir -p "${PACKAGE_DIR}/bin"
          cp build/bin/doxy* "${PACKAGE_DIR}/bin/"

          # Create compressed package
          TARBALL="doxygen-${VERSION}.${PLATFORM}-${COMPILER}.tar.gz"
          tar -czvf "${TARBALL}" "${PACKAGE_DIR}"

          # Prepare artifacts directory
          mkdir -p artifacts
          mv "${TARBALL}" artifacts/

          # Create build info file
          echo "Doxygen Version: ${VERSION}" > artifacts/build-info.txt
          echo "Build: ${{ matrix.config.name }}" >> artifacts/build-info.txt
          echo "OS: ${{ matrix.config.os }}" >> artifacts/build-info.txt
          echo "Compiler: ${{ matrix.config.cc }}" >> artifacts/build-info.txt
          echo "Build Type: ${{ matrix.config.build_type }}" >> artifacts/build-info.txt
          echo "Commit: $COMMIT_SHA" >> artifacts/build-info.txt
          echo "Build Date: $(date)" >> artifacts/build-info.txt
        shell: bash

      # Upload generated artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.config.name }}
          path: artifacts/*
          retention-days: 1

  # Release creation job
  create-release:
    needs: [get-latest-tag, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Fetch doxygen commit
        run: |
          # Fetch the specific commit from doxygen repo
          git fetch https://github.com/doxygen/doxygen.git ${{ needs.get-latest-tag.outputs.commit_sha }} --depth=1

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_artifacts
          pattern: artifacts-*
          merge-multiple: true

      - name: Create tag and push
        run: |
          RELEASE_TAG="${{ needs.get-latest-tag.outputs.release_tag }}"
          COMMIT_SHA="${{ needs.get-latest-tag.outputs.commit_sha }}"

          # Clean up possible line breaks
          COMMIT_SHA=$(echo "$COMMIT_SHA" | tr -d '\n')

          # Create tag if doesn't exist
          if ! git rev-parse $RELEASE_TAG >/dev/null 2>&1; then
            echo "Creating tag $RELEASE_TAG pointing to $COMMIT_SHA"
            git tag $RELEASE_TAG $COMMIT_SHA
            git push origin $RELEASE_TAG
          fi

          # Create release targeting specific commit SHA
          if ! gh release view $RELEASE_TAG >/dev/null 2>&1; then
            gh release create "$RELEASE_TAG" \
              --title "Doxygen $RELEASE_TAG" \
              --notes "Automated build from official source" \
              --target "$COMMIT_SHA"
          fi

          # Upload all artifacts to release
          find all_artifacts -type f | while read file; do
            gh release upload "$RELEASE_TAG" "$file" --clobber
          done
